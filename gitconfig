# Git Config
#
# Based of Mathiasâ€™s dotfiles

[user]
	name = Marcus van Dam
	email = "(none)"

[alias]
	# View abbreviated SHA, description, and history graph of the latest 20 commits
	l 	= log --pretty=oneline -n 20 --graph --abbrev-commit

	# View a pretty log graph (verbose)
	lg 	= log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative --all

	# View the current working tree status using the short format
	s 	= status -s

	# Show the diff between the latest commit and the current state
	d 	= !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# Commit all changes
	ca 	= !git add -A && git commit -av

	# Switch to a branch, creating it if necessary
	go 	= "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# Show verbose output about tags, branches or remotes
	tags 	 = tag -l
	branches = branch -a
	remotes  = remote -v

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	# Reverse the last commit
	undo-commit = reset --soft 'HEAD^'

	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Initial empty commit
	empty = "!git commit -am\"[empty] Initial commit\" --allow-empty"

	# Remove branches that have already been merged with master
	delete-merged = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# List contributors with number of commits
	contributors  = shortlog --summary --numbered

	# Show what I did today
	day = "!sh -c 'git log --reverse --no-merges --branches=* --date=local --after=\"yesterday 11:59PM\" --author=\"`git config --get user.name`\"'"

[apply]
	# Detect whitespace errors when applying a patch
	whitespace = fix

[core]
	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on OS X
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

[color "branch"]
	current = yellow reverse
	local 	= yellow
	remote 	= green

[color "diff"]
	meta = yellow bold
	frag = magenta bold # line info
	old  = red # deletions
	new  = green # additions

[color "status"]
	added 	  = yellow
	changed   = green
	untracked = cyan

[diff]
	# Detect copies as well as renames
	renames = copies

[diff "bin"]
	# Use `hexdump` to diff binary files
	textconv = hexdump -v -C

[help]
	# Automatically correct and execute mistyped commands
	autocorrect = 1

[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true

[push]
	# Use the Git 1.x.x default to avoid errors on machines with old Git
	# installations. To use `simple` instead, add this to your `~/.extra` file:
	# `git config --global push.default simple`. See http://git.io/mMah-w.
	default = matching

	# Make `git push` push relevant annotated tags when pushing branches out.
	followTags = true
